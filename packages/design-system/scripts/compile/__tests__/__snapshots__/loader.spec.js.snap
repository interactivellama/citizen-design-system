// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader template snapshots the template 1`] = `
"
  import Doc from '../../../shared/components/Doc';

  const addDocClass = className => ['doc', className].filter(x => x).join(' ')
  const last = xs => xs[xs.length - 1]
  const findChildHeadingByLevel = (level, heading = {}) =>
  heading.headingLevel < level ?
  findChildHeadingByLevel(level, last(heading.children)) || heading :
  null

  const El = el => (props, ...kids) => {
  const className = addDocClass(props.className);
  return React.createElement(
  el,
  Object.assign(props, { className, key: key() }),
  kids);

}
  const HeadingEl = el => (props, ...kids) => {
    const className = addDocClass(props.className);
    const [_, headingLevel] = el.split('h');

    const lastParentHeading =
    toc.length && findChildHeadingByLevel(headingLevel, last(toc));
    const item = {
      id: props.id,
      key: props.id,
      title: kids[0],
      headingLevel,
      children: [] };


    lastParentHeading ? lastParentHeading.children.push(item) : toc.push(item);

    return React.createElement(
    el,
    Object.assign(props, { className }),
    kids,
    React.createElement(
    'a',
    {
      className: 'doc doc-anchor',
      href: \`#\${props.id}\`,
      ['aria-label']: 'Jump to section' },

    '#'));


  }

  let counter = 0
  const key = () => {
  const id = ++counter;
  return id;
}

  const factories = {h1: HeadingEl('h1'),h2: HeadingEl('h2'),h3: HeadingEl('h3'),h4: HeadingEl('h4'),h5: HeadingEl('h5'),h6: HeadingEl('h6'), p: El('p'),div: El('div'),a: El('a'),em: El('em'),strong: El('strong'),ol: El('ol'),ul: El('ul'),li: El('li'),code: El('code'),blockquote: El('blockquote'),pre: El('pre'),tr: El('tr'),td: El('td'),th: El('th'),table: El('table'),thead: El('thead'),tbody: El('tbody')}

  let toc = [];
  export const getToc = () => toc;

    export const Content = function
    export default props => {
      toc = [];
      return <Doc><Content {...props} factories={factories} /></Doc>
    }
  "
`;
